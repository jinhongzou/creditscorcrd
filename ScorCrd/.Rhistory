showModal(pMessage(paste("告警：", TryCatch_msg)))
}
,error=function(e){
TryCatch_msg = paste("obs_menuItem_A2.plot_grid: ", e)
flog.info(TryCatch_msg, e, name='ERROR')
sprintf('错误:%s', TryCatch_msg)
showModal(pMessage(paste("错误：", TryCatch_msg)))
}
)
})
#相关性
output$FeaturePlot_2 <- renderPlot({
flog.info("[样本分析] 相关性 执行完成。", name='INFO')
tryCatch( corrplot(cor(g_dt.numeric[ ,input$FeaturePlot_2_var])
, type  =input$FeaturePlot_2_type
, order =input$FeaturePlot_2_order
, tl.srt=input$FeaturePlot_2_srt
, tl.col = "black"
, method=input$FeaturePlot_2_method
)
#,warning=function(w){
#  flog.info("obs_menuItem_A2: ", w, name='WARN')
#  sprintf('告警:%s', w)
#  showModal(pMessage("告警"))
#}
#,error=function(e){
#  flog.info("obs_menuItem_A2: ", e, name='ERROR')
#  sprintf('错误:%s', e)
#  showModal(pMessage("数据错误，请检查输入参数"))
#}
,warning=function(w){
TryCatch_msg = paste("obs_menuItem_A2.corrplot: ", w)
flog.info(TryCatch_msg, w, name='WARN')
sprintf('告警:%s', TryCatch_msg)
showModal(pMessage(paste("告警：", TryCatch_msg)))
}
,error=function(e){
TryCatch_msg = paste("obs_menuItem_A2.corrplot: ", e)
flog.info(TryCatch_msg, e, name='ERROR')
sprintf('错误:%s', TryCatch_msg)
showModal(pMessage(paste("错误：", TryCatch_msg)))
}
)
})
#碎石图
output$FeaturePlot_wss <- renderPlot({
if(length(input$FeaturePlot_3_var)<2){
showModal(pMessage("数据错误"))
return(NULL)
}
clust_dt <-clust_dt[ ,input$FeaturePlot_3_var]
wss <- (nrow(clust_dt)-1) * sum(apply(clust_dt, 2, var)) #计算离均差平方和
for(i in 2:15) {
wss[i] <- sum( kmeans(clust_dt, centers=i)$withinss )  #计算不通聚类格式的组内平方和
}
flog.info("[样本分析] 碎石图 执行完成。", name='INFO')
tryCatch( plot(1:length(wss), wss, type='b', xlab='集群个数', ylab='离均差平方和')
#,warning=function(w){
#  flog.info("obs_menuItem_A2: ", w, name='WARN')
#  sprintf('告警:%s', w)
#  showModal(pMessage("告警"))
#}
#,error=function(e){
#  flog.info("obs_menuItem_A2: ", e, name='ERROR')
#  sprintf('错误:%s', e)
#  showModal(pMessage("数据错误，请检查输入参数"))
#}
,warning=function(w){
TryCatch_msg = paste("obs_menuItem_A2.plot: ", w)
flog.info(TryCatch_msg, w, name='WARN')
sprintf('告警:%s', TryCatch_msg)
showModal(pMessage(paste("告警：", TryCatch_msg)))
}
,error=function(e){
TryCatch_msg = paste("obs_menuItem_A2.plot: ", e)
flog.info(TryCatch_msg, e, name='ERROR')
sprintf('错误:%s', TryCatch_msg)
showModal(pMessage(paste("错误：", TryCatch_msg)))
}
)
})
#箱线图
output$FeaturePlot_4 <- renderPlot({
dt <- g_dt.numeric[lab_var.numeric]
flag= g_dt.numeric[ ,'flag']
#dt=iris
#flag=iris[,'Species']
len_nm <- length(dt)
plist =list
plist=NULL
p=  list()
for(i in 1:len_nm)
{
p[[i]]  <- do.call(mplotbox, args=list( y= dt[,i], x=flag, title=lab_var.numeric[i],lab_x='flag', lab_y=names(dt[i])))
plist  <- c(plist, paste0("p[[", i,"]]", collapse = ','))
}
plist<-paste0(plist,collapse = ',')
#print(plist)
plist = eval(parse(text = paste0("list(", plist,")")))
#print(plist)
byrows <- sqrt(len_nm)
if(byrows %% 1 > 0 )
{
nrow = floor(byrows)+1
}else
{
nrow = floor(byrows)
}
if((len_nm/nrow) %% 1 > 0)
{
ncol = floor(len_nm/nrow) +1
}else
{
ncol = floor(len_nm/nrow)
}
flog.info("[样本分析] 箱线图 执行完成。", name='INFO')
plist = c(plist, list(nrow = nrow, ncol= ncol))
do.call(cowplot::plot_grid, plist)
})
#层次聚类
output$FeaturePlot_hclust <- renderPlot({
if(length(input$FeaturePlot_3_var)<2)
{
showModal(pMessage("数据错误"))
return(NULL)
}
clust_dt <-clust_dt[ ,input$FeaturePlot_3_var]
d <- dist(clust_dt, method = 'euclidean')
fit_hclust <- hclust(d, method='ward.D')
# rect.hclust(fit_hclust, k=3, border='red')
flog.info("[样本分析] 层次聚类 执行完成。", name='INFO')
tryCatch(  plot(fit_hclust,  labels = FALSE, hang = -1, main = "Tree")
#,warning=function(w){
# flog.info("obs_menuItem_A2: ", w, name='WARN')
#  sprintf('告警:%s', w)
#  showModal(pMessage("告警"))
#}
#,error=function(e){
# flog.info("obs_menuItem_A2: ", e, name='ERROR')
# sprintf('错误:%s', e)
# showModal(pMessage("数据错误，请检查输入参数"))
#}
,warning=function(w){
TryCatch_msg = paste("obs_menuItem_A2.plot.fit_hclust: ", w)
flog.info(TryCatch_msg, w, name='WARN')
sprintf('告警:%s', TryCatch_msg)
showModal(pMessage(paste("告警：", TryCatch_msg)))
}
,error=function(e){
TryCatch_msg = paste("obs_menuItem_A2.plot.fit_hclust: ", e)
flog.info(TryCatch_msg, e, name='ERROR')
sprintf('错误:%s', TryCatch_msg)
showModal(pMessage(paste("错误：", TryCatch_msg)))
}
)
})
#kmean聚类
output$FeaturePlot_kmeans <- renderPlot({
# 数据处理
if(length(input$FeaturePlot_3_var)<2)
{
showModal(pMessage("数据错误"))
return(NULL)
}
clust_dt <-clust_dt[ ,input$FeaturePlot_3_var]
fit_kmeans <- kmeans(clust_dt, centers=input$FeaturePlot_3_clust_cnt)
res <- data.frame(clust_dt, fit_kmeans$cluster)
flog.info("[样本分析] kmean聚类 执行完成。", name='INFO')
tryCatch(  clusplot(clust_dt, fit_kmeans$cluster, color = TRUE, shade = TRUE)
#,warning=function(w){
#  flog.info("obs_menuItem_A2: ", w, name='WARN')
#  sprintf('告警:%s', w)
#  showModal(pMessage("告警"))
# }
#,error=function(e){
#  flog.info("obs_menuItem_A2: ", e, name='ERROR')
#  sprintf('错误:%s', e)
#  showModal(pMessage("数据错误，请检查输入参数"))
#}
,warning=function(w){
TryCatch_msg = paste("obs_menuItem_A2.plot.fit_kmeans: ", w)
flog.info(TryCatch_msg, w, name='WARN')
sprintf('告警:%s', TryCatch_msg)
showModal(pMessage(paste("告警：", TryCatch_msg)))
}
,error=function(e){
TryCatch_msg = paste("obs_menuItem_A2.plot.fit_kmeans: ", e)
flog.info(TryCatch_msg, e, name='ERROR')
sprintf('错误:%s', TryCatch_msg)
showModal(pMessage(paste("错误：", TryCatch_msg)))
}
)
})
if(input$select=="error"){
stop("choose anoter option")
}
})
})
#Woe转换
obs_menuItem_B <- observeEvent(input$goButton_B, {
withBusyIndicatorServer("goButton_B", {
flog.info("[Woe转换] executing ...", name='INFO')
woebin_breaks_list <- isolate(g_var$woebin_breaks_list)
woebin_special_values <- isolate(g_var$woebin_special_values)
woebin_breaks_list    <- paste0("list(",isolate(woebin_breaks_list),")")
woebin_special_values <- paste0("list(",isolate(woebin_special_values),")")
flog.info("[Woe转换] 分箱 执行中...", name='INFO')
tryCatch(  #g_dt$bins <- mWoebin(dt = g_dt$train, y='flag' , breaks_list=list(g_var$woebin_breaks_list) )
g_dt$bins <- scorecard::woebin(dt=g_dt$train, y = 'flag'
, breaks_list=eval(parse(text=woebin_breaks_list))
, special_values=eval(parse(text=woebin_special_values))
, method = "chimerge"
)
#,error=function(e){
#   flog.info("obs_menuItem_B: ", e, name='ERROR')
#   sprintf('错误:%s', e)
#   showModal(pMessage("数据错误，请检查输入参数"))
# }
,error=function(e){
TryCatch_msg = paste("obs_menuItem_B.woebin: ", e)
flog.info(TryCatch_msg, e, name='ERROR')
sprintf('错误:%s', TryCatch_msg)
showModal(pMessage(paste("错误：", TryCatch_msg)))
}
)
flog.info("[Woe转换] 分箱 执行完", name='INFO')
g_dt$train_woe <- data.frame(woebin_ply(g_dt$train, g_dt$bins, print_step = 0))#, to='woe'))
flog.info("[Woe转换] 训练集woe转换 执行完成", name='INFO')
g_dt$test_woe  <- data.frame(woebin_ply(g_dt$test, g_dt$bins , print_step = 0))#, to='woe'))
flog.info("[Woe转换] 测试集woe转换 执行完成", name='INFO')
output$bin_smy <- renderPrint({ summary(g_dt$bins) })
bin_col_nm <- c(names(g_dt$bins))
output$train_woe <- renderDataTable({
#woe_tmp <- data.frame(woebin_ply(g_dt$train, g_dt$bins, print_step = 0, to='woe'))
#bin_tmp <- data.frame(woebin_ply(g_dt$train, g_dt$bins, print_step = 0, to='bin'))
#g_dt$train_woe <-  cbind(bin_tmp,woe_tmp[,-1])
flog.info("[Woe转换] 训练集woe展示 执行完成", name='INFO')
g_dt$train_woe #<-  woe_tmp
#flog.info("[Woe转换] Woe转换 执行完成", name='INFO')
}
,  options = list(scrollX= TRUE, searchHlight=TRUE)
)
output$test_woe <- renderDataTable({
#woe_tmp <- data.frame(woebin_ply(g_dt$test, g_dt$bins, print_step = 0, to='woe'))
#bin_tmp <- data.frame(woebin_ply(g_dt$test, g_dt$bins, print_step = 0, to='bin'))
#$test_woe <-  cbind(bin_tmp,woe_tmp[,-1])
flog.info("[Woe转换] 测试集woe展示 执行完成", name='INFO')
g_dt$test_woe #<-  woe_tmp
}
,  options = list(scrollX= TRUE, searchHlight=TRUE)
)
#变量分箱结果可视化变
lab_var= as.vector(bin_col_nm)
updateSelectizeInput(session, "show_bin_num"
,label = paste("Select input label", length(lab_var))
,choices = lab_var
, selected = head(lab_var, 1)
)
output$bin_plot<-renderPlot({
flog.info("[Woe转换] 测试集woe展示 执行完成", name='INFO')
if (length(bin_col_nm[bin_col_nm %in% as.character(input$show_bin_num)]) > 0 ){
woebin_plot(g_dt$bins[which(bin_col_nm == as.character(input$show_bin_num))] )
}
else {
woebin_plot(g_dt$bins[bin_col_nm[1]])
}
})
output$bin_plot_all<-renderPlot({
plist =list
plist=NULL
p=  list()
for(i in 1:length(bin_col_nm))
{
p[[i]] = woebin_plot(g_dt$bins[bin_col_nm[i]])[[bin_col_nm[i]]]
plist <- c(plist, paste0("p[[", i,"]]", collapse = ','))
}
plist<-paste0(plist,collapse = ',')
#print(plist)
plist = eval(parse(text = paste0("list(", plist,")")))
len_nm <- length(bin_col_nm)
byrows <- sqrt(len_nm)
if(byrows %% 1 > 0 )
{
nrow = floor(byrows)+1
}else
{
nrow = floor(byrows)
}
if((len_nm/nrow) %% 1 > 0)
{
ncol = floor(len_nm/nrow) +1
}else
{
ncol = floor(len_nm/nrow)
}
plist = c(plist, list(nrow = nrow, ncol= ncol))
do.call(cowplot::plot_grid, plist)
})
#
output$bin_tb<-renderDataTable({
if (length(bin_col_nm[bin_col_nm %in% as.character(input$show_bin_num)]) > 0 ){
var_iv <- g_dt$bins[[which(bin_col_nm == as.character(input$show_bin_num))]]
}
else {
var_iv <- g_dt$bins[[bin_col_nm[1]]]
}
data.frame(var_iv)
}
,  options = list(scrollX= TRUE, searchHlight=TRUE)
)
#str( g_dt$train_woe)
#str(g_dt$bins)
if(input$select=="error"){
stop("choose anoter option")
}
})
})
obs_menuItem_C <- observeEvent(input$goButton_C, {
withBusyIndicatorServer("goButton_C", {
flog.info("[特征表现] executing ...", name='INFO')
bins_data <- woe_2_dataframe(g_dt$bins)
total_iv <- unique(data.frame(bins_data[1],bins_data[10]))
total_iv_sort <- total_iv[order(total_iv$total_iv ,decreasing = T),]
#print(total_iv_sort)
#print(sort(total_iv$total_iv, decreasing = T))
names(total_iv_sort) <- c('vars', 'woe_iv');
g_dt$bins_woe_iv <- total_iv_sort
#变量分箱结果IV排序
output$bin_var_tb<-renderDataTable({
#total_iv_sort
#barplot(woe_iv ~ vars, data = g_dt$bins_woe_iv, main="IV"
#, col=c(love_color(type = "lightnihon_8x1"), love_color(type = "darknihon_8x1"))
#       )
flog.info("[特征表现] 变量分箱结果IV排序 执行完成。", name='INFO')
data.frame(g_dt$bins_woe_iv)
#plot_bar(dat= g_dt$bins_woe_iv, x='vars',y='woe_iv')
}
,  options = list(scrollX= TRUE, searchHlight=TRUE)
)
#随机森林
output$cf_var<-renderDataTable({
cft <-party::cforest(flag~., data = g_dt$train_woe,
controls = cforest_unbiased(mtry = 3, ntree=25))
var1 <- party::varimp(cft)
var1 <- var1[order(var1,decreasing = F)]
cf_var_tb <- data.frame(vars=names(var1), imp_rt=as.numeric(var1))
#barplot(imp_rt ~ vars, data = cf_var_tb, ylab="重要系数", main="随机森林特征筛选"
#        #, col=c(love_color(type = "lightnihon_8x1"), love_color(type = "darknihon_8x1"))
#)
flog.info("[特征表现] 随机森林 执行完成。", name='INFO')
data.frame(cf_var_tb)
}
,  options = list(scrollX= TRUE, searchHlight=TRUE)
)
if(input$select=="error"){
stop("choose anoter option")
}
})
})
obs_menuItem_D <- observeEvent(input$goButton_D, {
withBusyIndicatorServer("goButton_D", {
flog.info("[模型评估] executing ...", name='INFO')
# 回归
data_model <- glm(flag~., data = g_dt$train_woe, family = "binomial")#,col_idx
flog.info("[模型评估] glm逻辑回归 执行完成。", name='INFO')
#逐步回归，选择变量
data_stepwise <- step(data_model, direction = "both")
g_dt$eval_m   <- eval(data_stepwise$call)
flog.info("[模型评估] data_stepwise 执行完成。", name='INFO')
#预测的概率
g_dt$train_woe_pred <- predict(g_dt$eval_m, g_dt$train_woe, type='response')
g_dt$test_woe_pred  <- predict(g_dt$eval_m, g_dt$test_woe , type='response')
flog.info("[模型评估] 预测概率 执行完成。", name='INFO')
#生成评分卡
pdo = g_var$scorecard_pdo
points = g_var$scorecard_point
g_dt$score_card <- scorecard(g_dt$bins, g_dt$eval_m , points=points, pdo=pdo )
flog.info("[模型评估] 生成评分卡 执行完成。", name='INFO')
#验证评分集
g_dt$train_score <- scorecard_ply(dt=g_dt$train, card=g_dt$score_card, print_step=0)
g_dt$test_score  <- scorecard_ply(dt=g_dt$test , card=g_dt$score_card, print_step=0)
perf_train<- perf_eva(label=g_dt$train_woe$flag, g_dt$train_woe_pred, title='train'
, type = c('roc', 'ks', 'lift', 'pr')
, show_plot = TRUE)
perf_test<- perf_eva(label=g_dt$test_woe$flag, g_dt$test_woe_pred, title='test'
, type = c('roc', 'ks', 'lift', 'pr')
, show_plot = TRUE)
flog.info("[模型评估] 验证评分集 执行完成。", name='INFO')
output$model_summary<-renderPrint({
summary(g_dt$eval_m)
})
output$model_desc <- renderImage({
filename <- normalizePath(file.path('./model_desc.jpeg'))
list(src=filename)
},
deleteFile = FALSE
)
#---------------训练样本性能 ROC-AUC,KS
#后期使用ggplot来优化
#as_ggplot(train_perf$pic$grobs$pks)
output$perf_eva_train <- renderPlot({
p1 <- as_ggplot(perf_train$pic$grobs$pks)   #ks
p2 <- as_ggplot(perf_train$pic$grobs$plift) #plift
p3 <- as_ggplot(perf_train$pic$grobs$proc)  #auc
p4 <- as_ggplot(perf_train$pic$grobs$ppr)   #p-R
cowplot::plot_grid(p1, p2, p3, p4, nrow = 2, ncol= 2)
})
output$perf_eva_train_1<-renderPlot({
plot(perf_train$pic$grobs$pks)   #ks
})
output$perf_eva_train_2<-renderPlot({
plot(perf_train$pic$grobs$plift) #lift
})
output$perf_eva_train_3<-renderPlot({
plot(perf_train$pic$grobs$proc)  #auc
})
output$perf_eva_train_4<-renderPlot({
plot(perf_train$pic$grobs$ppr)   #p-R
})
#---------------测试样本性能 ROC-AUC,KS
output$perf_eva_test <- renderPlot({
p1 <- as_ggplot(perf_test$pic$grobs$pks)   #ks
p2 <- as_ggplot(perf_test$pic$grobs$plift) #plift
p3 <- as_ggplot(perf_test$pic$grobs$proc)  #auc
p4 <- as_ggplot(perf_test$pic$grobs$ppr)   #p-R
cowplot::plot_grid(p1, p2, p3, p4, nrow = 2, ncol= 2)
})
output$perf_eva_test_1<-renderPlot({
plot(perf_test$pic$grobs$pks)   #ks
})
output$perf_eva_test_2<-renderPlot({
plot(perf_test$pic$grobs$plift) #lift
})
output$perf_eva_test_3<-renderPlot({
plot(perf_test$pic$grobs$proc)  #auc
})
output$perf_eva_test_4<-renderPlot({
plot(perf_test$pic$grobs$ppr)   #p-R
})
output$perf_eva_psi<-renderPlot({
#模型的稳定性度量：PSI
train_score <-na.omit(g_dt$train_score)
test_score  <-na.omit(g_dt$test_score)
psi_ret <- perf_psi(
score=list(train=train_score    , test=test_score),
label=list(train=g_dt$train_woe$flag, test=g_dt$test_woe$flag)
)
psi_ret$pic
})
if(input$select=="error"){
stop("choose anoter option")
}
})
})
obs_menuItem_E <- observeEvent(input$goButton_E, {
withBusyIndicatorServer("goButton_E", {
flog.info("[评分卡] executing ...", name='INFO')
output$score_card <- renderDataTable({
#将评分卡转变成数组
data.frame(card_2_dataframe(g_dt$score_card ))
})
if(input$select=="error"){
stop("choose anoter option")
}
})
})
obs_menuItem_E <- observeEvent(input$goButton_E, {
withBusyIndicatorServer("goButton_E", {
flog.info("[评分卡] executing ...", name='INFO')
output$score_card <- renderDataTable({
#将评分卡转变成数组
data.frame(card_2_dataframe(g_dt$score_card ))
})
if(input$select=="error"){
stop("choose anoter option")
}
})
})
output$Dw_Button_ScoreCard <- downloadHandler(
filename = function() {
paste0("ScoreCard_", Sys.Date(), '.csv', sep='')
},
content = function(file) {
dt <- data.frame( card_2_dataframe(g_dt$score_card ))
write.csv(dt, file)
},
contentType = "text/csv"
)
output$Dw_Button_Train_Score <- downloadHandler(
filename = function() {
paste0("train_score", Sys.Date(), '.csv', sep='')
},
content = function(file) {
#write.csv(data.frame(cbind(g_dt$train, pred=g_dt$train_woe_pred, score=g_dt$train_score)),file)
write.csv(data.frame(cbind(g_srt$train, pred=g_dt$train_woe_pred, score=g_dt$train_score)),file)
},
contentType = "text/csv"
)
output$Dw_Button_Test_Score <- downloadHandler(
filename = function() {
paste0("test_score", Sys.Date(), '.csv', sep='')
},
content = function(file) {
#write.csv(data.frame(cbind(g_dt$test, pred=g_dt$test_woe_pred, score=g_dt$test_score)) ,file)
write.csv(data.frame(cbind(g_srt$test, pred=g_dt$test_woe_pred, score=g_dt$test_score)),file)
},
contentType = "text/csv"
)
})
# runApp('/Users/john/ScorCrd/ScorCrd_v2.0.1', host="0.0.0.0", port=5555)
# runApp('G:/MyPrj/ScorCrd_v2.0.x/ScorCrd', host="0.0.0.0", port=5554)
runApp('G:/MyPrj/ScorCrd_v2.1.x/ScorCrd')
